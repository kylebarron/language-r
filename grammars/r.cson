'scopeName': 'source.r'
'name': 'R'
'fileTypes': [
  'R'
  'r'
  's'
  'S'
  'Rprofile'
  'Rhistory'
]
'firstLineMatch': '^#![ \\t]*/.*\\bRscript\\b'
'patterns': [
  # Regular Expressions:
  {
    'comment': 'Regex functions with pattern in first spot by default'
    'comment': 'begin/end is function name and parentheses'
    'begin': '\\b(grep|grepl|regexpr|gregexpr|sub|gsub|regexec|regex)(\\()'
    'beginCaptures':
      '1':
        'name': 'entity.name.function.r'
      '2':
        'name': 'punctuation.definition.entity.begin.r'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.entity.end.r'
    'name': 'meta.function.r'
    'patterns': [
      # first, look for if there's an element that says pattern = "..."
      {
        'begin': '(pattern)\\s*(=)\\s*(?=("|\'))'
        'beginCaptures':
          '1':
            'name': 'variable.parameter.function.r'
          '2':
            'name': 'keyword.operator.assignment.r'
        'end': '\\s*(,|(?=\\))|\\n)'
        # 'end': '\\s*(?:(,)|(?=$\\n?|[\\)\\:]))'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.key-value.r'
        'patterns': [
          {
            'begin': '"|\''
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.string.begin.r'
            'end': '"|\''
            'endCaptures':
              '0':
                'name': 'punctuation.definition.string.end.r'
            'patterns': [
              {
                'include': '#regular_expressions'
              }
            ]
          }
          {
            'match': ','
            'name': 'punctuation.separator.key-value.r'
          }
        ]
      }
      # Now hopefully look for the first spot
      {
        'begin': '(?<=\\()(?=("|\'))'
        'end': '\\s*(?:(,)|(?=$\\n?|[\\)\\:]))'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.key-value.r'
        'patterns': [
          {
            'begin': '"|\''
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.string.begin.r'
            'end': '"|\''
            'endCaptures':
              '0':
                'name': 'punctuation.definition.string.end.r'
            'patterns': [
              {
                'include': '#regular_expressions'
              }
            ]
          }
        ]
      }
      {
        'include': '#keyword_arguments'
      }
      {
        'include': '#function_arguments'
      }
      {
        'include': '#operators'
      }
    ]
  }
  # Functions with pattern in second spot:
  {
    'comment': 'Regex functions with pattern in second spot by default'
    'comment': 'This begin/end gets the function name and the outer parentheses'
    'begin': '\\b(strsplit|stri_(count|detect|extract|locate|match|replace|split|startswith|endswith|subset)[_a-z]*|
    str_(count|detect|split|subset|which)|str_(extract|locate|match|replace|view)(_all)?)(\\()'
    'beginCaptures':
      '1':
        'name': 'entity.name.function.r'
      '6':
        'name': 'punctuation.definition.entity.begin.r'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.entity.end.r'
    'name': 'meta.function.r'
    'patterns': [
      {
        'comment': 'This begin should get the first function argument'
        'comment': 'This '
        'begin': '(.+)(,)'
        'beginCaptures':
          '1':
            'patterns': [
              {
                'include': '#keyword_arguments'
              }
              {
                'include': '#operators'
              }
            ]
        'end': '(?=\\))'
        'patterns': [
          'begin': '(?=("|\'))'
          'end': '(?![\\w])'
          'endCaptures':
            '1':
              'name': 'punctuation.separator.parameters.r'
          'patterns': [
            {
              'include': '#regular_expressions'
            }
          ]
        ]
      }
      {
        'include': '$self'
      }
    ] 
  }
    

  {
    'include': '#line_comments'
  }
  {
    'include': '#constants'
  }
  {
    'match': '\\b(library|require)\\b'
    'name': 'keyword.control.import.r'
  }
  {
    'include': '#control_constructs'
  }
  {
    'include': '#operators'
  }
  
  
  {
    'include': '#strings'
  }
  {
    'begin': '(function)\\s*(\\()'
    'beginCaptures':
      '1': 
        'name': 'keyword.control.r'
      '2':
        'name': 'punctuation.definition.parameters.begin.r'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.begin.r'
    'patterns': [
      {
        'include': '#functions'
      }
      {
        'include': '#keyword_arguments'
      }
      {
        'include': '#function_arguments'
      }
      {
        'include': '#strings'
      }      
    ]
  }
  {
    'match': '\\b(break|next|return|in|invisible)\\b'
    'name': 'keyword.control.r'
  }
  {
    'comment': 'keywords that delimit an exception'
    'match': '\\b(try|tryCatch|withCallingHandlers|signalCondition|simpleError|simpleWarning|simpleMessage)\\b'
    'name': 'keyword.control.exception.r'
  }
  {
    'include': '#functions'
  }
  
  
  
  
  
  
  
  
      # 'match': '([a-zA-Z]|\\.(?![0-9]))[a-zA-Z0-9._]*'

  # {
  #   'comment': 'Highlight functions and function calls'
  #   'begin': '(([a-zA-Z]|\\.(?![0-9]))[a-zA-Z0-9._]*\\s*\\()'
  #   'end': '(\\))'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.arguments.end.r'
  #   'name': 'support.function.r'
  #   'patterns': [
  #     {
  #       'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()'
  #       'end': '(?=\\s*\\()'
  #       'patterns': [
  #         {
  #           'include': '#dotted_name'
  #         }
  #       ]
  #     }
  #     {
  #       'begin': '(\\()'
  #       'beginCaptures':
  #         '1':
  #           'name': 'punctuation.definition.arguments.begin.r'
  #       'contentName': 'variable.parameter.function.r'
  #       'end': '(?=\\))'
  #       'patterns': [
  #         {
  #           'include': '#keyword_arguments'
  #         }
  #         {
  #           'include': '$self'
  #         }
  #       ]
  #     }
  #   ]
  # }


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  # TO WORK ON !!!!
  # {
  #   'captures':
  #     '1':
  #       'name': 'entity.name.function.r'
  #   'match': '([[A-Za-z].][[0-9A-Za-z]._]*)\\('
  # }
  # {
  #   'captures':
  #     '1':
  #       'name': 'entity.name.function.r'
  #     '2':
  #       'name': 'keyword.operator.assignment.r'
  #     '3':
  #       'name': 'keyword.control.r'
  #   'match': '([[A-Za-z].][[0-9A-Za-z]._]*)\\s*(<-|=)\\s*(function)(\\()'
  #   'name': 'meta.function.r'
  # }
  ## END TO WORK ON
  {
    'captures':
      '1':
        'name': 'entity.name.tag.r'
      '4':
        'name': 'entity.name.type.r'
    'match': '(setMethod|setReplaceMethod|setGeneric|setGroupGeneric|setClass)\\s*\\(\\s*([[A-Za-z]\\d]+\\s*=\\s*)?("|\\x{27})([a-zA-Z._\\[\\$@][a-zA-Z0-9._\\[]*?)\\3.*'
    'name': 'meta.method.declaration.r'
  }
  {
    'match': '([[A-Za-z].][[0-9A-Za-z]._]*)\\s*\\('
  }
  # {
  #   'captures':
  #     '1':
  #       'name': 'variable.parameter.r'
  #     '2':
  #       'name': 'keyword.operator.assignment.r'
  #   'match': '([[A-Za-z].][[0-9A-Za-z]._]*)\\s*(=)(?=[^=])'
  # }
  # {
  #   'match': '\\b([\\d_][[0-9A-Za-z]._]+)\\b'
  #   'name': 'invalid.illegal.variable.other.r'
  # }
  {
    'match': '\\b([0-9A-Za-z_.]+)(::)'
    'captures':
      '1':
        'name': 'entity.namespace.r'
      '2':
        'name': 'keyword.operator.namespace.r'
  }
  {
    'comment': 'empty vector c() NON FUNCTIONAL'
    'captures':
      '1':
        'name': 'punctuation.definition.list.begin.r'
      '2':
        'name': 'meta.empty-list.r'
      '3':
        'name': 'punctuation.definition.list.end.r'
    'match': '(c\\()(\\s*(\\)))\\b'
  }
  {
    'comment': 'NON FUNCTIONAL'
    'begin': '(c\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.list.begin.r'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.list.end.r'
    'name': 'meta.structure.list.r'
    'patterns': [
      {
        'begin': '(?<=\\(|\\,)\\s*(?![\\),])'
        'contentName': 'meta.structure.list.item.r'
        'end': '\\s*(?:(,)|(?=\\)))'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.list.r'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
]
'repository':
  'builtin_types':
    'match': '\\b(logical|numeric|character|complex|matrix|array|data\\.frame|list|factor)(?=\\s*\\()'
    'name': 'support.type.r'
  'constants':
    'patterns': [
      {
        'match': '\\b(?i:(0x\\h*)L)'
        'name': 'constant.numeric.integer.long.hexadecimal.python'
      }
      {
        'match': '\\b(?i:(0x\\h*))'
        'name': 'constant.numeric.integer.hexadecimal.python'
      }
      {
        'match': '\\.[0-9]+((e|E)(\\+|-)?[0-9]+)?(i|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric.r'
        'comment': 'to color the period in front of .123'
      }
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|((\\.[0-9]+)|([0-9]+\\.?[0-9]*))((e|E)(\\+|-)?[0-9]+)?)(i|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric.r'
        'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Literal-constants'
      }
      {
        'match': '\\b(T|F|TRUE|FALSE|NULL|NA_integer_|NA_real_|NA_complex_|NA_character_|NA|Inf|NaN)\\b'
        'name': 'constant.language.r'
      }
      {
        'match': '\\b(pi|letters|LETTERS|month\\.abb|month\\.name)\\b'
        'name': 'support.constant.misc.r'
      }
    ]
  'control_constructs':
    'patterns': [
      {
        'match': ';'
        'name': 'keyword.control.end_statement.r'
        'comment': 'statements can be ended by a semicolon or newline'
      }
      {
        'begin': '\\{'
        'beginCaptures':
          '0':
            'name': 'keyword.section.block.begin.r'
        'end': '\\}'
        'endCaptures':
          '0':
            'name': 'keyword.section.block.end.r'
        'name': 'meta.block.r'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'comment': 'keywords that delimit flow conditionals'
        'match': '\\b(if|else)\\b'
        'name': 'keyword.control.conditional.r'
      }
      {
        'comment': 'keywords that delimit loops'
        'match': '\\b(for|while|repeat)\\b'
        'name': 'keyword.control.repeat.r'
      }
      {
        'match': '\\b(switch)\\b'
        'name': 'keyword.control.r'
      }
    ]
  'escaped_char':
    'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Special-operators'
    'captures':
      '1':
        'name': 'constant.character.escape.hex.r'
      '2':
        'name': 'constant.character.escape.octal.r'
      '3':
        'name': 'constant.character.escape.newline.r'
      '4':
        'name': 'constant.character.escape.backlash.r'
      '5':
        'name': 'constant.character.escape.double-quote.r'
      '6':
        'name': 'constant.character.escape.single-quote.r'
      '7':
        'name': 'constant.character.escape.bell.r'
      '8':
        'name': 'constant.character.escape.backspace.r'
      '9':
        'name': 'constant.character.escape.formfeed.r'
      '10':
        'name': 'constant.character.escape.return.r'
      '11':
        'name': 'constant.character.escape.tab.r'
      '12':
        'name': 'constant.character.escape.vertical-tab.r'
    'match': '(\\\\x[0-9A-Fa-f]{1,2})|(\\\\[0-7]{3})|(\\\\\\n)|(\\\\\\\\)|(\\\\\\")|(\\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\r)|(\\\\t)|(\\\\v)'
  'escaped_unicode_char':
    'captures':
      '13':
        'name': 'constant.character.escape.unicode.16-bit-hex.r'
      '14':
        'name': 'constant.character.escape.unicode.32-bit-hex.r'
    'match': '(\\\\u\\{?[0-9A-Fa-f]{4}\\}?)|(\\\\U\\{?[0-9A-Fa-f]{8}\\}?)'
    'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Special-operators'
  'functions':
    'patterns': [
      {
        'comment': 'first highlight illegal functions'
        'match': '\\b(if|else|repeat|while|function|for|in|next|break|TRUE|FALSE|NULL|Inf|NaN|NA|NA_integer_|NA_real_|NA_complex_|NA_character_|\\.\\.\\.|\\.\\.[0-9]+)\\b'
        'name': 'invalid.illegal.name.reserved.r'
        'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Reserved-words'        
      }
      # {
      #   'match': '\\b([^a-zA-Z.][a-zA-Z0-9_.]*)\\s+(<-|=)'
      #   'name': 'invalid.illegal.name.r'
      #   'comment': 'must start with a letter or dot'
      # }
      # {
      #   'match': '(\\s|\\n)+([.][0-9][a-zA-Z0-9_.]*)\\s+(<-|=)'
      #   'name': 'invalid.illegal.name.r'
      #   'comment': 'if it starts with a dot, it can\'t be followed by a number'
      # }
      {
        'comment': 'Highlight functions and their arguments'
        'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Identifiers'
        'begin': '(([a-zA-Z]|\\.(?![0-9]))[a-zA-Z0-9._]*)\\s*(\\()'
        'beginCaptures':
          '1':
            'name': 'support.function.r'
          '3':
            'name': 'punctuation.definition.parameters.begin.r'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.parameters.begin.r'
        'patterns': [
          {
            'include': '#functions'
          }
          {
            'include': '#keyword_arguments'
          }
          {
            'include': '#function_arguments'
          }
          {
            'include': '#strings'
          }
        ]
      }
    ]
  'function_arguments':
    'begin': '\\b(([a-zA-Z]|\\.(?![0-9]))[a-zA-Z0-9._]*)\\s*'
    'beginCaptures':
      '1':
        'name': 'variable.parameter.function.r'
    'end': '\\s*(?:(,)|(?=$\\n?|[\\)\\:]))'
    'endCaptures':
      '1':
        'name': 'punctuation.separator.key-value.r'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'keyword_arguments':
    'begin': '\\b(([a-zA-Z]|\\.(?![0-9]))[a-zA-Z0-9._]*)\\s*(=)(?!=)'
    'beginCaptures':
      '1':
        'name': 'variable.parameter.function.r'
      '3':
        'name': 'keyword.operator.assignment.r'
    'end': '\\s*(?:(,)|(?=$\\n?|[\\)\\:]))'
    'endCaptures':
      '1':
        'name': 'punctuation.separator.key-value.r'
    'patterns': [
      # Unclear if I need to do includes by type or if $self is ok
      # Had issues with regex strings everywhere, but I had included #regular_expressions in #strings
      # {
      #   'include': '#constants'
      # }
      # {
      #   'include': '#strings'
      # }
      # {
      #   'include': '#comments'
      # }
      # {
      #   'include': '#operators'
      # }
      {
        'include': '$self'
      }
    ]
  'line_comments':
    'patterns': [
      {
        'begin': '(^[ \\t]+)?(?=#\'?)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.r'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '#\'?'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.r'
            'end': '\\n'
            'name': 'comment.line.number-sign.r'
          }
        ]        
      }
      {
        'begin': '(^[ \\t]+)?(?=#\'[ ]*(@[a-zA-Z0-9]+))'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.roxygen.r'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '#\'[ ]*(@[a-zA-Z0-9]+)'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.roxygen.r'
              '1':
                'name': 'keyword.roxygen.r'
            'end': '\\n'
            'name': 'comment.line.number-sign.roxygen.r'
          }
        ]        
      }
      {
        'captures':
          '1':
            'name': 'comment.line.pragma.r'
          '2':
            'name': 'entity.name.pragma.name.r'
        'match': '^(#pragma[ \\t]+mark)[ \\t](.*)'
        'name': 'comment.line.pragma-mark.r'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '(<-|<<-|->>|->)'
        'name': 'keyword.operator.assignment.r'
      }
      {
        'match': '(==|!=|<>|<|>|<=|>=)'
        'name': 'keyword.operator.comparison.r'
      }
      {
        'match': '='
        'name': 'keyword.operator.assignment.r'
        'comment': 'separate so that == is treated as one construct for ligature purposes'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%\\/%|%%|%\\*%|%in%|%o%|%x%|%>%|\\^)'
        'name': 'keyword.operator.arithmetic.r'
      }
      {
        'match': '(!|&&|&|\\|\\||\\|)'
        'name': 'keyword.operator.logical.r'
      }
      {
        'match': '(\\.\\.\\.|\\$|\\?|@|:|\\~)'
        'name': 'keyword.operator.other.r'
      }
    ]
  'regular_expressions':
    'patterns': [
      {
        'include': 'source.regexp.r'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.r'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.r'
        'name': 'string.quoted.double.r'
        'patterns': [
          {
            'match': '\\\\0'
            'name': 'invalid.illegal.nul.character.r'
            'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Special-operators'
          }
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.r'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.r'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.r'
        'name': 'string.quoted.single.r'
        'patterns': [
          {
            'match': '\\\\0'
            'name': 'invalid.illegal.nul.character.r'
            'comment': 'https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Special-operators'
          }
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.r'
          }
        ]
      }
    ]
